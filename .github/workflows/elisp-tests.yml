name: ELisp Tests

on:
  push:
  pull_request:

jobs:
  nix-matrix:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - uses: nixbuild/nix-quick-install-action@v29
      - id: set-matrix
        name: Generate Nix Matrix
        run: |
          set -Eeu
          echo "matrix=$(nix eval --json '.#githubActions')" >> "$GITHUB_OUTPUT"

  build:
    needs: nix-matrix
    runs-on: ${{ matrix.image }}
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    strategy:
      matrix:
        include: ${{ fromJSON(needs.nix-matrix.outputs.matrix) }}
    timeout-minutes: 30 # Safety net in case of hanging executable
    steps:
      - uses: actions/checkout@v4
      - uses: nixbuild/nix-quick-install-action@v29
      - name: Run Tests
        run: nix run --system ${{ matrix.system }} -L ".#checks.${{ matrix.system }}.${{ matrix.target }}"

  build-done:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Fail if any previous steps failed
        if: ${{ needs.build.result == 'failure' }}
        run: |
          echo "One or more jobs in the matrix failed."
          exit 1
